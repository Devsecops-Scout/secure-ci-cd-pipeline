# ------------------------------------------------------------------------
# Description: GitLab CI/CD pipeline with Built-in Security Gates
# Author: Devsecops-Scout
# Last Updated: 2025-07-21
# ------------------------------------------------------------------------

stages:
  - scan
  - build
  - test
  - validate
  - plan
  - deploy

variables:
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  DOCKER_IMAGE: "ghcr.io/Devsecops-Scout/secure-ci-cd-pipeline:$IMAGE_TAG"
  CODEQL_LANG: python
  CODEQL_DB: codeql-db

before_script:
  - echo "üöÄ Starting pipeline..."
  - python3 -m pip install --upgrade pip || true

# -------------------------
# üõ°Ô∏è Static Code + Secret Scan
# -------------------------
scan:
  stage: scan
gitleaks:
  image: debian:bullseye  # Or an internal hardened base image
  before_script:
    - apt update && apt install -y coreutils
    - cd tools
    - sha256sum -c gitleaks.sha256
    - chmod +x gitleaks
  script:
    - echo "üîí Running Gitleaks in secure mode..."
    - ./tools/gitleaks detect --source=. --verbose --redact
  only:
    - main

    - echo "üõ°Ô∏è Running Trivy..."
    - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
    - echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | \
        tee /etc/apt/sources.list.d/trivy.list
    - apt-get update && apt-get install -y trivy
    - trivy fs .

# -------------------------
# üîç CodeQL Analysis
# -------------------------
codeql-analysis:
  stage: scan
  image: python:3.11-slim
  variables:
    CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR: "$CI_PROJECT_DIR/codeql-scratch"
  before_script:
    - apt update && apt install -y unzip curl
    - mkdir -p "$CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR"
    - export PATH="/opt/codeql:$PATH"
    - python3 --version
  script:
    - echo "üîç Running CodeQL scan..."
    - codeql version
    - codeql database create $CODEQL_DB --language=python --source-root=. --command="python3 setup.py install"
    - codeql database analyze $CODEQL_DB --format=sarifv2.1.0 --output=codeql-results.sarif
    - /opt/codeql/python/tools/autobuild.sh
  artifacts:
    paths:
      - codeql-results.sarif
    expire_in: 7 days
  only:
    - main

# -------------------------
# üõ†Ô∏è Docker Image Build
# -------------------------
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "üõ†Ô∏è Building Docker image..."
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE

# -------------------------
# ‚úÖ Run Tests
# -------------------------
test:
  stage: test
  image: python:3.11
  script:
    - echo "üî¨ Running tests..."
    - pytest || echo "‚ö†Ô∏è No tests found or configured."

# -------------------------
# ‚úÖ Validate Terraform Code
# -------------------------
validate:
  stage: validate
  image: hashicorp/terraform:1.7.5
  script:
    - cd terraform/$CI_ENVIRONMENT_NAME
    - terraform init -input=false
    - terraform validate
  only:
    refs: [dev, staging, main]
  environment:
    name: $CI_COMMIT_REF_NAME

# -------------------------
# üîç Terraform Plan
# -------------------------
plan:
  stage: plan
  image: hashicorp/terraform:1.7.5
  script:
    - cd terraform/$CI_ENVIRONMENT_NAME
    - terraform init -input=false
    - terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
    - terraform plan -input=false -out=tfplan
  artifacts:
    paths:
      - terraform/$CI_ENVIRONMENT_NAME/tfplan
  only:
    refs: [dev, staging, main]
  environment:
    name: $CI_COMMIT_REF_NAME

# -------------------------
# üöÄ Deploy to Environment
# -------------------------
deploy:
  stage: deploy
  image: hashicorp/terraform:1.7.5
  script:
    - cd terraform/$CI_ENVIRONMENT_NAME
    - terraform init -input=false
    - terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
    - terraform apply -input=false -auto-approve tfplan
  only:
    refs: [dev, staging, main]
  environment:
    name: $CI_COMMIT_REF_NAME
  when: manual
