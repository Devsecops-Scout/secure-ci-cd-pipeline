# ----------------------------------------------------------------------------
# GitLab CI/CD pipeline with Built-in Security Gates (DoD/Offline Compliant)
# Author: Devsecops-Scout
# Last Updated: 2025-07-22
# ----------------------------------------------------------------------------

stages:
  - prepare
  - scan
  - build
  - test
  - validate
  - plan
  - deploy

variables:
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  DOCKER_IMAGE: "ghcr.io/Devsecops-Scout/secure-ci-cd-pipeline:$IMAGE_TAG"
  CODEQL_HOME: "$CI_PROJECT_DIR/codeql"
  CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR: "$CI_PROJECT_DIR/codeql-scratch"
  CODEQL_LANG: python
  CODEQL_DB: codeql-db

before_script:
  - echo "üöÄ Starting pipeline..."
  - python3 -m pip install --upgrade pip || true

# -------------------------
# üîß CodeQL Setup (Offline Bundle)
# -------------------------
codeql-setup:
  stage: prepare
  image: python:3.11-slim
  script:
    - apt update && apt install -y unzip curl coreutils
    - echo "üîê Verifying CodeQL bundle checksum..."
    - sha256sum -c tools/codeql.zip.sha256
    - mkdir -p "$CODEQL_HOME"
    - unzip ./tools/codeql.zip -d "$CODEQL_HOME"
    - mkdir -p "$CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR"
  artifacts:
    paths:
      - codeql/
      - codeql-scratch/
      - tools/
    expire_in: 1h

# -------------------------
# üõ°Ô∏è Gitleaks Scan
# -------------------------
gitleaks-scan:
  stage: scan
  image: debian:bullseye
  before_script:
    - apt update && apt install -y coreutils gnupg lsb-release wget
    - cd tools
    - sha256sum -c gitleaks.sha256
    - chmod +x gitleaks
    - cd ..
  script:
    - echo "üîí Running Gitleaks in secure mode..."
    - ./tools/gitleaks detect --source=. --verbose --redact
  only:
    - main

# -------------------------
# üõ°Ô∏è Trivy Scan
# -------------------------
trivy-scan:
  stage: scan
  image: debian:bullseye
  script:
    - echo "üõ°Ô∏è Running Trivy..."
    - apt update && apt install -y gnupg lsb-release wget apt-transport-https
    - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
    - echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/trivy.list
    - apt-get update && apt-get install -y trivy
    - trivy fs .
  only:
    - main

# -------------------------
# üîç CodeQL Python Scan
# -------------------------
codeql-python-scan:
  stage: scan
  image: python:3.11-slim
  variables:
    PATH: "$CODEQL_HOME/codeql:$PATH"
  dependencies:
    - codeql-setup
  script:
    - echo "üîé Starting CodeQL Python scan..."
    - $CODEQL_HOME/codeql/codeql version
    - mkdir -p codeql-workspace
    # The --command argument is used to install the Python package so that CodeQL can extract the build artifacts and dependencies for accurate analysis.
    - $CODEQL_HOME/codeql/codeql database create codeql-workspace/codeql-db --language=python --source-root=. --command="pip install -r requirements.txt"
    - $CODEQL_HOME/codeql/codeql database analyze codeql-workspace/codeql-db "$CODEQL_HOME/codeql/queries/python" --format=sarifv2.1.0 --output=codeql-report.sarif
  artifacts:
    paths:
      - codeql-report.sarif
    expire_in: 1 week
  only:
    - main

# -------------------------
# üõ†Ô∏è Docker Image Build
# -------------------------
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "üõ†Ô∏è Building Docker image..."
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE

# -------------------------
# ‚úÖ Run Tests
# -------------------------
test:
  stage: test
  image: python:3.11
  script:
    - echo "üî¨ Running tests..."
    - pytest || echo "‚ö†Ô∏è No tests found or configured."

# -------------------------
# ‚úÖ Validate Terraform Code
# -------------------------
validate:
  stage: validate
  image: hashicorp/terraform:1.7.5
  script:
    - cd terraform/$CI_ENVIRONMENT_NAME
    - terraform init -input=false
    - terraform validate
  only:
    refs:
      - dev
      - staging
      - main
  environment:
    name: $CI_COMMIT_REF_NAME

# -------------------------
# üîç Terraform Plan
# -------------------------
plan:
  stage: plan
  image: hashicorp/terraform:1.7.5
  script:
    - cd terraform/$CI_ENVIRONMENT_NAME
    - terraform init -input=false
    - terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
    - terraform plan -input=false -out=tfplan
  artifacts:
    paths:
      - terraform/$CI_ENVIRONMENT_NAME/tfplan
  only:
    refs:
      - dev
      - staging
      - main
  environment:
    name: $CI_COMMIT_REF_NAME

# -------------------------
# üöÄ Deploy to Environment (Manual)
# -------------------------
deploy:
  stage: deploy
  image: hashicorp/terraform:1.7.5
  script:
    - cd terraform/$CI_ENVIRONMENT_NAME
    - terraform init -input=false
    - terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
    - terraform apply -input=false -auto-approve tfplan
  only:
    refs:
      - dev
      - staging
      - main
  environment:
    name: $CI_COMMIT_REF_NAME
  when: manual
