# ----------------------------------------------------------------------------
# GitLab CI/CD pipeline with Security Gates & Full Workflow
# Author: DevSecOps-Scout
# Updated: 2025-08-14 
# ----------------------------------------------------------------------------

stages:
  - prepare
  - scan
  - build
  - test
  - validate
  - plan
  - deploy

variables:
  IMAGE_TAG: "${CI_COMMIT_SHORT_SHA,,}"  # lowercase commit hash
  DOCKER_IMAGE: "ghcr.io/devsecops-scout/secure-ci-cd-pipeline:$IMAGE_TAG"
  CODEQL_HOME: "$CI_PROJECT_DIR/codeql"
  CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR: "/tmp/codeql-python"
  CODEQL_LANG: python
  CODEQL_DB: codeql-db
  SONAR_HOST_URL: "https://sonarqube.example.com"
  SONAR_LOGIN: "$SONAR_TOKEN"

# -------------------------
# üîß Prepare Tools (cached, version-aware)
# -------------------------
prepare-tools:
  stage: prepare
  image: python:3.11
  script:
    - apt update && apt install -y unzip curl coreutils wget bash jq
    - mkdir -p tools

    # ----------------------------
    # CodeQL: download latest only if missing
    # ----------------------------
    - |
      CODEQL_LATEST_TAG=$(curl -s https://api.github.com/repos/github/codeql-cli-binaries/releases/latest | jq -r '.tag_name')
      CODEQL_ZIP=tools/codeql-$CODEQL_LATEST_TAG.zip
      if [ ! -f "$CODEQL_ZIP" ]; then
        echo "üì• Downloading CodeQL $CODEQL_LATEST_TAG..."
        curl -L -o "$CODEQL_ZIP" "https://github.com/github/codeql-cli-binaries/releases/download/$CODEQL_LATEST_TAG/codeql.zip"
      else
        echo "‚úÖ CodeQL $CODEQL_LATEST_TAG already downloaded."
      fi
    - rm -rf "$CODEQL_HOME"
    - mkdir -p "$CODEQL_HOME" "$CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR"
    - unzip -oq "$CODEQL_ZIP" -d "$CODEQL_HOME"

    # ----------------------------
    # Gitleaks: download latest only if missing
    # ----------------------------
    - |
      GITLEAKS_LATEST_TAG=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | jq -r '.tag_name')
      GITLEAKS_BIN=tools/gitleaks-$GITLEAKS_LATEST_TAG
      if [ ! -f "$GITLEAKS_BIN" ]; then
        echo "üì• Downloading Gitleaks $GITLEAKS_LATEST_TAG..."
        curl -L -o "$GITLEAKS_BIN" "https://github.com/gitleaks/gitleaks/releases/download/$GITLEAKS_LATEST_TAG/gitleaks-linux-amd64"
        chmod +x "$GITLEAKS_BIN"
      else
        echo "‚úÖ Gitleaks $GITLEAKS_LATEST_TAG already downloaded."
      fi
    - ln -sf "$GITLEAKS_BIN" tools/gitleaks  # symlink for consistent path
  cache:
    key: tools-cache
    paths:
      - tools/

# -------------------------
# Helper command for downstream jobs
# -------------------------
.extract-tools: &extract-tools
  cache:
    key: tools-cache
    paths:
      - tools/

# -------------------------
# üõ°Ô∏è Scan Stage (Parallel Jobs)
# -------------------------
gitleaks-scan: # Scan for SAST SARIF
  stage: scan
  image: debian:bullseye
  needs: ["prepare-tools"]
  <<: *extract-tools
  rules:
    - changes:
        - "**/*.py"
        - "**/*.js"
        - "**/*.ts"
        - "**/*.go"
        - "**/*.java"
      when: always
    - when: never
  script:
    - echo "üîí Running Gitleaks..."
    - ./tools/gitleaks detect --source=. --verbose --redact --report-format=sarif --report-path=./gitleaks.sarif || true
  artifacts:
    paths:
      - gitleaks.sarif
    reports:
      codequality: gitleaks.sarif
    expire_in: 1 week

trivy-scan: # Scan for Dependency
  stage: scan
  image: aquasec/trivy:0.45.0
  needs: ["prepare-tools"]
  <<: *extract-tools
  rules:
    - changes:
        - "Dockerfile"
        - "docker/**"
      when: always
    - when: never
  script:
    - echo "üõ°Ô∏è Running Trivy..."
    - trivy fs --security-checks vuln,config --format sarif --output=./trivy.sarif .
  artifacts:
    paths:
      - trivy.sarif
    reports:
      codequality: trivy.sarif
    expire_in: 1 week

codeql-python-scan: # Scan for SAST
  stage: scan
  image: python:3.11
  needs: ["prepare-tools"]
  variables:
    PATH: "$CODEQL_HOME/codeql:$PATH"
  <<: *extract-tools
  rules:
    - changes:
        - "**/*.py"
      when: always
    - when: never
  script:
    - echo "üîé Running CodeQL Python scan..."
    - codeql version
    - mkdir -p codeql-workspace
    - codeql database create codeql-workspace/$CODEQL_DB --language=$CODEQL_LANG --source-root=. --command="pip install -r requirements.txt"
    - codeql database analyze codeql-workspace/$CODEQL_DB "$CODEQL_HOME/codeql/queries/$CODEQL_LANG" --format=sarifv2.1.0 --output=./codeql-report.sarif
  artifacts:
    paths:
      - codeql-report.sarif
    reports:
      codequality: codeql-report.sarif
    expire_in: 1 week

sonarqube-scan: # Analysis Code Quality
  stage: scan
  image: sonarsource/sonar-scanner-cli:5.15.0.36234-latest
  needs: ["prepare-tools"]
  <<: *extract-tools
  rules:
    - changes:
        - "**/*.py"
        - "**/*.js"
        - "**/*.ts"
        - "**/*.go"
        - "**/*.java"
      when: always
    - when: never
  script:
    - echo "üìä Running SonarQube scan..."
    - sonar-scanner -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.sarif.reportPaths=./sonar-report.json
  artifacts:
    paths:
      - sonar-report.json
    reports:
      codequality: sonar-report.json
    expire_in: 1 week

# -------------------------
# üõ†Ô∏è Docker Build & Push
# -------------------------
build:
  stage: build
  image: docker:25.0.3
  services:
    - docker:25.0.3-dind
  before_script:
    # Fail early if credentials are missing
    - |
      if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_PASSWORD" ]; then
        echo "‚ùå Missing DOCKER_USERNAME or DOCKER_PASSWORD"
        exit 1
      fi
      # Fallback namespace if empty
      if [ -z "$CI_PROJECT_NAMESPACE" ]; then
        REPO_NAMESPACE="$DOCKER_USERNAME"
      else
        REPO_NAMESPACE="$CI_PROJECT_NAMESPACE"
      fi
      REPO_NAME=$(echo "$CI_PROJECT_NAME" | tr '[:upper:]' '[:lower:]')
      # GHCR-compliant repository name
      DOCKER_REPO="ghcr.io/$REPO_NAMESPACE/$REPO_NAME"
      IMAGE_TAG=$(echo "$CI_COMMIT_SHORT_SHA" | tr '[:upper:]' '[:lower:]')
      echo "Docker image will be: $DOCKER_REPO:$IMAGE_TAG"
      echo "$DOCKER_PASSWORD" | docker login ghcr.io -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "üì¶ Building Docker image..."
    - docker build -t "$DOCKER_REPO:$IMAGE_TAG" .
    - echo "üöÄ Pushing Docker image to GHCR..."
    - docker push "$DOCKER_REPO:$IMAGE_TAG"
  after_script:
    - echo "üîí Logging out from GHCR..."
    - docker logout ghcr.io
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /main|master/'

# -------------------------
# üß™ Python Tests
# -------------------------
test:
  stage: test
  image: python:3.11
  script:
    - echo "üî¨ Running Python unit tests..."
    - pip install -r requirements.txt
    - pytest || echo "‚ö†Ô∏è No tests found or all passed."

# -------------------------
# ‚úÖ Terraform Validate
# -------------------------
validate:
  stage: validate
  image: hashicorp/terraform:1.7.5
  script:
    - |
      if [ -d "terraform/$CI_ENVIRONMENT_NAME" ]; then
        cd terraform/$CI_ENVIRONMENT_NAME
        terraform init -input=false
        terraform validate
      else
        echo "‚ö†Ô∏è Skipping validation: no directory terraform/$CI_ENVIRONMENT_NAME"
      fi

# -------------------------
# üîç Terraform Plan
# -------------------------
plan:
  stage: plan
  image: hashicorp/terraform:1.7.5
  script:
    - |
      cd terraform/$CI_ENVIRONMENT_NAME || exit 0
      terraform init -input=false
      terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
      terraform plan -input=false -out=tfplan
  artifacts:
    paths:
      - terraform/$CI_ENVIRONMENT_NAME/tfplan

# -------------------------
# üöÄ Terraform Deploy (Manual)
# -------------------------
deploy:
  stage: deploy
  image: hashicorp/terraform:1.7.5
  script:
    - |
      cd terraform/$CI_ENVIRONMENT_NAME || exit 0
      terraform init -input=false
      terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
      terraform apply -input=false -auto-approve tfplan
  when: manual
