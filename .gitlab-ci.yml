# ----------------------------------------------------------------------------
# GitLab CI/CD pipeline with Security Gates & Full Workflow
# Author: DevSecOps-Scout
# Updated: 2025-08-14
# ----------------------------------------------------------------------------

stages:
  - prepare
  - scan
  - build
  - test
  - validate
  - plan
  - deploy

variables:
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  DOCKER_IMAGE: "ghcr.io/Devsecops-Scout/secure-ci-cd-pipeline:$IMAGE_TAG"
  CODEQL_HOME: "$CI_PROJECT_DIR/codeql"
  CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR: "/tmp/codeql-python"
  CODEQL_LANG: python
  CODEQL_DB: codeql-db
  SONAR_HOST_URL: "https://sonarqube.example.com"
  SONAR_LOGIN: "$SONAR_TOKEN"

# -------------------------
# üîß Prepare Tools (cached, fixed unzip)
# -------------------------
prepare-tools:
  stage: prepare
  image: python:3.11-slim
  script:
    - apt update && apt install -y unzip curl coreutils wget
    - mkdir -p tools
    - |
      if [ ! -f tools/codeql.zip ]; then
        echo "üì• Downloading CodeQL..."
        curl -L -o tools/codeql.zip https://github.com/github/codeql-cli-binaries/releases/latest/download/codeql.zip
      fi
    # Ensure CODEQL_HOME is clean
    - rm -rf "$CODEQL_HOME"
    - mkdir -p "$CODEQL_HOME" "$CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR"
    # Unzip with overwrite to avoid interactive prompts
    - unzip -oq tools/codeql.zip -d "$CODEQL_HOME"
    - curl -L -o tools/gitleaks https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64
    - chmod +x tools/gitleaks
  cache:
    key: tools-cache
    paths:
      - tools/

# -------------------------
# Helper command for downstream jobs
# -------------------------
.extract-tools: &extract-tools
  cache:
    key: tools-cache
    paths:
      - tools/

# -------------------------
# üõ°Ô∏è Scan Stage (Parallel Jobs)
# -------------------------
gitleaks-scan:
  stage: scan
  image: debian:bullseye
  needs: ["prepare-tools"]
  <<: *extract-tools
  script:
    - echo "üîí Running Gitleaks..."
    - ./tools/gitleaks detect --source=. --verbose --redact --report-format=sarif --report-path=gitleaks.sarif || true
  artifacts:
    paths:
      - gitleaks.sarif
    reports:
      codequality: gitleaks.sarif
    expire_in: 1 week

trivy-scan:
  stage: scan
  image: aquasec/trivy:0.46.3
  needs: ["prepare-tools"]
  <<: *extract-tools
  script:
    - echo "üõ°Ô∏è Running Trivy..."
    - trivy fs --security-checks vuln,config --format sarif --output trivy.sarif .
  artifacts:
    paths:
      - trivy.sarif
    reports:
      codequality: trivy.sarif
    expire_in: 1 week

codeql-python-scan:
  stage: scan
  image: python:3.11-slim
  needs: ["prepare-tools"]
  variables:
    PATH: "$CODEQL_HOME/codeql:$PATH"
  <<: *extract-tools
  script:
    - echo "üîé Running CodeQL Python scan..."
    - codeql version
    - mkdir -p codeql-workspace
    - codeql database create codeql-workspace/$CODEQL_DB --language=$CODEQL_LANG --source-root=. --command="pip install -r requirements.txt"
    - codeql database analyze codeql-workspace/$CODEQL_DB "$CODEQL_HOME/codeql/queries/$CODEQL_LANG" --format=sarifv2.1.0 --output=codeql-report.sarif
  artifacts:
    paths:
      - codeql-report.sarif
    reports:
      codequality: codeql-report.sarif
    expire_in: 1 week

sonarqube-scan:
  stage: scan
  image: sonarsource/sonar-scanner-cli:5.12.0.22497
  needs: ["prepare-tools"]
  <<: *extract-tools
  script:
    - sonar-scanner -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.sarif.reportPaths=sonar-report.json
  artifacts:
    paths:
      - sonar-report.json
    reports:
      codequality: sonar-report.json
    expire_in: 1 week

# -------------------------
# üõ†Ô∏è Docker Build & Push
# -------------------------
build:
  stage: build
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login ghcr.io -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "üõ†Ô∏è Building Docker image..."
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE

# -------------------------
# üß™ Python Tests
# -------------------------
test:
  stage: test
  image: python:3.11
  script:
    - echo "üî¨ Running Python unit tests..."
    - pip install -r requirements.txt
    - pytest || echo "‚ö†Ô∏è No tests found or all passed."

# -------------------------
# ‚úÖ Terraform Validate
# -------------------------
validate:
  stage: validate
  image: hashicorp/terraform:1.7.5
  script:
    - |
      if [ -d "terraform/$CI_ENVIRONMENT_NAME" ]; then
        cd terraform/$CI_ENVIRONMENT_NAME
        terraform init -input=false
        terraform validate
      else
        echo "‚ö†Ô∏è Skipping validation: no directory terraform/$CI_ENVIRONMENT_NAME"
      fi

# -------------------------
# üîç Terraform Plan
# -------------------------
plan:
  stage: plan
  image: hashicorp/terraform:1.7.5
  script:
    - |
      cd terraform/$CI_ENVIRONMENT_NAME || exit 0
      terraform init -input=false
      terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
      terraform plan -input=false -out=tfplan
  artifacts:
    paths:
      - terraform/$CI_ENVIRONMENT_NAME/tfplan

# -------------------------
# üöÄ Terraform Deploy (Manual)
# -------------------------
deploy:
  stage: deploy
  image: hashicorp/terraform:1.7.5
  script:
    - |
      cd terraform/$CI_ENVIRONMENT_NAME || exit 0
      terraform init -input=false
      terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
      terraform apply -input=false -auto-approve tfplan
  when: manual
