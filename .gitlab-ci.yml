# ----------------------------------------------------------------------------
# GitLab CI/CD Pipeline with Security Gates (WSL/DoD Compatible + SonarQube + Caching)
# Author: DevSecOps-Scout
# Updated: 2025-08-14
# ----------------------------------------------------------------------------

stages:
  - prepare
  - scan
  - build
  - test
  - validate
  - plan
  - deploy

variables:
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  DOCKER_IMAGE: "ghcr.io/Devsecops-Scout/secure-ci-cd-pipeline:$IMAGE_TAG"
  CODEQL_HOME: "$CI_PROJECT_DIR/codeql"
  CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR: "$CI_PROJECT_DIR/codeql-scratch"
  CODEQL_LANG: python
  CODEQL_DB: codeql-db

# -------------------------
# üîß CodeQL Setup (Offline + Fallback Download + Cache)
# -------------------------
codeql-setup:
  stage: prepare
  image: python:3.11-slim
  cache:
    key: codeql
    paths:
      - codeql/
      - tools/codeql.zip
  script:
    - apt update && apt install -y unzip curl coreutils
    - mkdir -p tools
    - |
      if [ ! -f tools/codeql.zip ]; then
        echo "üì• Downloading CodeQL..."
        curl -L -o tools/codeql.zip https://github.com/github/codeql-cli-binaries/releases/latest/download/codeql.zip
      else
        echo "üì¶ Using cached CodeQL bundle"
      fi
    - echo "üîê CodeQL SHA256 (info only, no fail)"
    - sha256sum tools/codeql.zip || true
    - mkdir -p "$CODEQL_HOME"
    - unzip -q tools/codeql.zip -d "$CODEQL_HOME"
    - mkdir -p "$CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR"
  artifacts:
    paths:
      - codeql-scratch/
    expire_in: 1h

# -------------------------
# üõ°Ô∏è Scan Stage
# -------------------------
codeql-analysis: # üîç CodeQL Python Scan (SAST)
  stage: scan
  image: python:3.11-slim
  cache:
    key: codeql-db
    paths:
      - codeql-db/
  variables:
    PATH: "$CODEQL_HOME/codeql:$PATH"
  dependencies:
    - codeql-setup
  script:
    - mkdir -p codeql-db codeql-scratch
    - codeql database create codeql-db --language=$CODEQL_LANG --source-root=.
    - codeql database analyze codeql-db "$CODEQL_HOME/codeql/queries/$CODEQL_LANG" --format=sarif-latest --output=codeql-scratch/codeql-results.sarif
  artifacts:
    paths:
      - codeql-scratch/codeql-results.sarif
    reports:
      sast: codeql-scratch/codeql-results.sarif
    expire_in: 1 week

gitleaks-scan: # üõ°Ô∏è Gitleaks Scan (SAST SARIF)
  stage: scan
  image: debian:bullseye
  before_script:
    - apt update && apt install -y wget unzip jq
    - cd tools && chmod +x gitleaks && cd ..
  script:
    - ./tools/gitleaks detect --source=. --report-format=json --report-path=gitleaks.json
    - gitleaks convert --sarif -i gitleaks.json -o gitleaks.sarif
  artifacts:
    paths:
      - gitleaks.sarif
    reports:
      sast: gitleaks.sarif
    expire_in: 1 week

trivy-scan: # üõ°Ô∏è Trivy Scan (Dependency Scanning)
  stage: scan
  image: aquasec/trivy:latest
  script:
    - trivy fs --security-checks vuln --format sarif --output trivy.sarif .
  artifacts:
    paths:
      - trivy.sarif
    reports:
      dependency_scanning: trivy.sarif
    expire_in: 1 week

sonarqube-analysis: # üü¢ SonarQube Analysis (Code Quality)
  stage: scan
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - sonar-scanner \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.sources=. \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.report.export.path=sonar-report.json
  artifacts:
    paths:
      - sonar-report.json
    reports:
      codequality: sonar-report.json
    expire_in: 1 week

# -------------------------
# üõ†Ô∏è Docker Build & Push
# -------------------------
build:
  stage: build
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login ghcr.io -u "$DOCKER_USERNAME" --password-stdin
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE

# -------------------------
# ‚úÖ Run Python Tests (with Cache)
# -------------------------
test:
  stage: test
  image: python:3.11
  cache:
    key: python-deps
    paths:
      - .venv/
      - ~/.cache/pip
  before_script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - pytest || echo "‚ö†Ô∏è No tests found or all passed."

# -------------------------
# ‚úÖ Terraform Validate
# -------------------------
validate:
  stage: validate
  image: hashicorp/terraform:1.7.5
  script:
    - |
      if [ -d "terraform/$CI_ENVIRONMENT_NAME" ]; then
        cd terraform/$CI_ENVIRONMENT_NAME
        terraform init -input=false
        terraform validate
      else
        echo "‚ö†Ô∏è Skipping validation: no directory terraform/$CI_ENVIRONMENT_NAME"
      fi
  environment:
    name: $CI_COMMIT_REF_NAME

# -------------------------
# üîç Terraform Plan
# -------------------------
plan:
  stage: plan
  image: hashicorp/terraform:1.7.5
  script:
    - cd terraform/$CI_ENVIRONMENT_NAME || exit 0
    - terraform init -input=false
    - terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
    - terraform plan -input=false -out=tfplan
  artifacts:
    paths:
      - terraform/$CI_ENVIRONMENT_NAME/tfplan
  environment:
    name: $CI_COMMIT_REF_NAME

# -------------------------
# üöÄ Terraform Deploy (Manual)
# -------------------------
deploy:
  stage: deploy
  image: hashicorp/terraform:1.7.5
  script:
    - cd terraform/$CI_ENVIRONMENT_NAME || exit 0
    - terraform init -input=false
    - terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
    - terraform apply -input=false -auto-approve tfplan
  environment:
    name: $CI_COMMIT_REF_NAME
  when: manual
