# ----------------------------------------------------------------------------
# GitLab CI/CD pipeline with Security Gates (WSL/DoD Compatible)
# Author: DevSecOps-Scout
# Updated: 2025-08-14 (end-to-end with caching)
# ----------------------------------------------------------------------------

stages:
  - prepare
  - scan
  - build
  - test
  - validate
  - plan
  - deploy

variables:
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  DOCKER_IMAGE: "ghcr.io/Devsecops-Scout/secure-ci-cd-pipeline:$IMAGE_TAG"
  CODEQL_HOME: "$CI_PROJECT_DIR/codeql"
  CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR: "/tmp/codeql-python"
  CODEQL_LANG: python
  CODEQL_DB: codeql-db
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# -------------------------
# üîß Prepare Tools (CodeQL, Gitleaks)
# -------------------------
prepare-tools:
  stage: prepare
  image: python:3.11-slim
  cache:
    key: tools-cache
    paths:
      - tools/
      - codeql/
      - codeql-scratch/
  script:
    - apt update && apt install -y unzip curl coreutils wget gnupg lsb-release
    - mkdir -p tools
    # CodeQL
    - |
      if [ ! -f tools/codeql.zip ]; then
        curl -L -o tools/codeql.zip https://github.com/github/codeql-cli-binaries/releases/latest/download/codeql.zip
      fi
    - mkdir -p "$CODEQL_HOME"
    - unzip -q tools/codeql.zip -d "$CODEQL_HOME"
    - mkdir -p "$CODEQL_EXTRACTOR_PYTHON_SCRATCH_DIR"
    # Gitleaks
    - |
      if [ ! -f tools/gitleaks ]; then
        curl -L -o tools/gitleaks https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64
        chmod +x tools/gitleaks
      fi
  artifacts:
    paths:
      - tools/
    expire_in: 1h

# -------------------------
# üîç Scan Stage (Gitleaks, Trivy, CodeQL, SonarQube)
# -------------------------
scan:
  stage: scan
  image: python:3.11-slim
  services:
    - docker:dind
  variables:
    PATH: "$CODEQL_HOME/codeql:$PATH"
  dependencies:
    - prepare-tools
  cache:
    key: pip-cache
    paths:
      - .cache/pip
      - codeql-workspace/
  script:
    # Install Python deps using cache
    - pip install --cache-dir="$PIP_CACHE_DIR" -r requirements.txt || echo "‚ö†Ô∏è pip install failed, continuing..."
    
    # Gitleaks Scan (SAST SARIF)
    - echo "üîí Running Gitleaks..."
    - ./tools/gitleaks detect --source=. --verbose --redact --report-format=json --report-path=gitleaks.json || echo "‚ö†Ô∏è Gitleaks failed"
    - if [ -f gitleaks.json ]; then ./tools/gitleaks convert --sarif -i gitleaks.json -o gitleaks.sarif; fi

    # Trivy Scan (Dependency Scanning)
    - echo "üõ°Ô∏è Running Trivy..."
    - apt update && apt install -y apt-transport-https wget gnupg lsb-release
    - wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/trivy.gpg
    - echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/trivy.list
    - apt update && apt install -y trivy
    - trivy fs --format sarif --output trivy.sarif . || echo "‚ö†Ô∏è Trivy failed"

    # CodeQL Python Scan (SAST)
    - echo "üîé Running CodeQL..."
    - codeql version
    - mkdir -p codeql-workspace
    - |
      if [ ! -d codeql-workspace/$CODEQL_DB ]; then
        codeql database create codeql-workspace/$CODEQL_DB --language=$CODEQL_LANG --source-root=. --command="pip install -r requirements.txt"
      fi
    - codeql database analyze codeql-workspace/$CODEQL_DB "$CODEQL_HOME/codeql/queries/$CODEQL_LANG" --format=sarifv2.1.0 --output=codeql.sarif || echo "‚ö†Ô∏è CodeQL analysis failed"

    # SonarQube Analysis (Code Quality)
    - echo "üìä Running SonarQube..."
    - sonar-scanner \
        -Dsonar.projectKey=$CI_PROJECT_NAME \
        -Dsonar.sources=. \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.report.export.path=sonar-report.json || echo "‚ö†Ô∏è SonarQube failed"

  artifacts:
    paths:
      - gitleaks.sarif
      - trivy.sarif
      - codeql.sarif
      - sonar-report.json
    reports:
      codequality:
        - gitleaks.sarif
        - trivy.sarif
        - codeql.sarif
        - sonar-report.json
    expire_in: 1 week
  only:
    - main

# -------------------------
# üõ†Ô∏è Docker Build & Push
# -------------------------
build:
  stage: build
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login ghcr.io -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "üõ†Ô∏è Building Docker image..."
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE

# -------------------------
# ‚úÖ Run Python Tests
# -------------------------
test:
  stage: test
  image: python:3.11
  script:
    - echo "üî¨ Running Python unit tests..."
    - pip install -r requirements.txt
    - pytest || echo "‚ö†Ô∏è No tests found or all passed."

# -------------------------
# ‚úÖ Terraform Validate
# -------------------------
validate:
  stage: validate
  image: hashicorp/terraform:1.7.5
  script:
    - |
      if [ -d "terraform/$CI_ENVIRONMENT_NAME" ]; then
        cd terraform/$CI_ENVIRONMENT_NAME
        terraform init -input=false
        terraform validate
      else
        echo "‚ö†Ô∏è Skipping validation: no directory terraform/$CI_ENVIRONMENT_NAME"
      fi
  only:
    refs:
      - dev
      - staging
      - main
  environment:
    name: $CI_COMMIT_REF_NAME

# -------------------------
# üîç Terraform Plan
# -------------------------
plan:
  stage: plan
  image: hashicorp/terraform:1.7.5
  script:
    - |
      cd terraform/$CI_ENVIRONMENT_NAME || exit 0
      terraform init -input=false
      terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
      terraform plan -input=false -out=tfplan
  artifacts:
    paths:
      - terraform/$CI_ENVIRONMENT_NAME/tfplan
  only:
    refs:
      - dev
      - staging
      - main
  environment:
    name: $CI_COMMIT_REF_NAME

# -------------------------
# üöÄ Terraform Deploy to Environment (Manual)
# -------------------------
deploy:
  stage: deploy
  image: hashicorp/terraform:1.7.5
  script:
    - |
      cd terraform/$CI_ENVIRONMENT_NAME || exit 0
      terraform init -input=false
      terraform workspace select $CI_ENVIRONMENT_NAME || terraform workspace new $CI_ENVIRONMENT_NAME
      terraform apply -input=false -auto-approve tfplan
  only:
    refs:
      - dev
      - staging
      - main
  environment:
    name: $CI_COMMIT_REF_NAME
  when: manual
